// 콜스택 + 실행컨텍스트
// 전역 실행 컨텍스트
// 실행컨텍스트 -자바스크립트 코드가 실행되는 환경
//Record Enviroment(환경 레코드) / Outer Enviroment(외부 환경)
// - 생성단계(var num), 모든 변수와 함수 선언 같은 것들이 기록 됩니다.
// - 실행단계, 생성 단계에서 기록된 정보를 바탕으로 코드를 실행
// 자바스크립트의 코드는 실행 단계에서 컨텍스트라는 박스에 들어가고, 박스들이 쌓이는 곳이 콜스택

/////////////////////////////////////////////////////////////////////////

/*
1.자바스크립트는 코드 실행 전 "실행 컨텍스트"를 만듬
ㄴ 언제 실행된 컨텍스트냐에 따라서 "전역"과 "함수" 실행 컨텍스트로 나뉨
    ㄴ 전역 실행 컨텍스트(무조건 생성) - 자바스크립트 코드가 함수가 아닌 곳에서 실행되는 환경
    ㄴ 함수 실행 컨텍스트 - 자바스크립트 코드가 함수 내부에서 실행되는 환경

2.컨텍스트 내부에서 record와 outer Enviroment 객체로 나뉨
    ㄴ record Enviroment : 생성과 실행이라는 두 가지 단계로 나뉨

3.만들어진 컨텍스트들은 만들어진 순서대로 콜스택에 담김 (FILO)
    ㄴ 함수 실행 컨텍스트는 항상 전역 실행 컨텍스트 위에 담김
*/

/////////////////////////////////////////////////////////////////////////

//record Enviroment : 생성과 실행이라는 두 가지 단계로 나뉨
// 생성 -> a = function
// 실행 -> a();
function a() {
  console.log("a");
  function b() {
    console.log("b");
  }
  b();
}

a(); // 함수를 호출하는 그 즉시 함수 실행 컨텍스트가 생기고, 콜스택에서 전역 실행 컨텍스트 위에 쌓인다
console.log("c");

// TDZ(temporal dead zone | 일시적 사각지대)
/*
a();
const a = function a() {...}

a에는 결정되지 않은 값이 들어가있다. 이를 TDZ 
*/
