// 콜스택 + 실행컨텍스
// 실행컨텍스트 - 자바스크립트 코드가 실행되는 환경
// 전역 실행컨텍스트(필수) - 자바스크립트 코드가 함수가 아닌 곳에서 실행되는 환경
// - 생성 단계(var num), 모든 변수와 함수 선언 같은 것들이 기록
// - 실행 단계, 생성 단계에서 기록된 정보를 바탕으로 코드를 실행
// 함수 실행컨텍스트 - 자바스크립트 코드가 함수인 곳에서 실행되는 환경

//BUT
// 만약 const a = () =>{} 이런 게 만들어져 있다면?
// 함수로 전역 실행컨텍스트로 a가 선언되는 게 아니라 그냥 변수 a = undefined로 선언됨(var였으면), const이면 그냥 공간만 만들고 어떤 게 할당될지 모른다
// 걔가 함수였다는 것을 아는 건 실행단계가 됐을 때

//outer로 상위 record에 있는 변수를 찾아가는 코드
// 왜 상위에서 하위 outer로 못가는가? javascript는 싱글스레드이기 때문에, 만약 콜스택 위에 실행컨텍스트가 하나 생기면 그 밑에 깔린 컨텍스트는 실행되지 않음, 그러면 만약 함수를 다 실행하고 그 함수 실행컨텍스트가 제외되면, 그 할당된 메모리(변수)도 사라지기 때문에 전역 실행컨텍스트를 실행하며 그 위 함수 실행컨텍스트를 outer로 참조하지 못 하는것

const num = 10;
function printNum() {
  const num = 20;
}

printNum();
console.log(num); // 10
console.log(uname); // kisu ? No, 참조할 함수 실행컨텍스트가 이미 사라져서 참조할 수 없음
