// 5. 함수 (function)
// 관련있는 표현들을 묶어서 한 번에 실행시키는 것 (동시에 실행되면 좋겠다 싶은 코드를 한 번에 모아놓은, 일괄적으로 조작하고 싶은 코드를 모아놓은 코드 주머니)
// 장점 : 코드의 재사용성 증가

// 5-1. 사용법 : 정의하고, 선언한다
// 3가지 방식의 함수 :: 함수 선언식, 함수 표현식, 화살표 함수

// (1) 함수 선언식(선언문)

// (1-1) 함수를 정의한다.
function greet() {
  // 몇 줄이든
  // 로직을 구현해서
  // 넣을 수 있음
  console.log("greet");
}

// (1-2) 함수를 호출한다.
// 호출법 :: 식별자() :: 함수이름()
greet();

// (2) 함수 표현식
// 함수를 변수에 담음

// (2-1) 정의
// (a) named function (네이밍 함수)
const hello_n = function afternoon() {
  console.log("hello");
};
// ** 권장사항 : 변수이름 = 함수이름

// (b) unname function (익명 함수)
const hello_un = function () {
  console.log("hello");
};

// ** 이론적 구분, 디버깅할 때 네이밍함수가 유리함 (이름이 찍혀서 위치 추적 가능) -> 오늘 날은 별로 의미 없음
// ** 결론 :: 이론적으로만 차이를 알고, 실무에서는 아무거나 사용 (일괄적 사용 필요)

// (2-2) 호출
// 호출법 :: 식별자() :: 변수이름() -> 함수이름 아님
hello();
// 왜? 변수가 상자, 그 안에 함수라고 하면 프로그램에 존재하는(상자밖의) 개발자는 변수로 불러야 하지, 그 안에 보이지 않는 함수를 부를 수 없음
// 예를 들어, 102호에 a가 묵는다고 하면 -> 외부인은 102호 라고 하지, a가 있는지 여자인지 몇 살인지 이런걸 모르고 호출할 수 없음

// (3) 화살표 함수 (ES6)
const func = () => {};

// (3-1) 정의
() => {
  console.log("arrow function");
};
// 함수를 매개변수로 전달할 때 간편하게 하기 위함

// (2-2) 호출
// 화살표 함수는 이름이 없음
// (a) :: 즉시 실행 함수 -> 함수를 소괄호로 담고, 뒤에 ()
(() => {
  console.log("arrow function");
})();

// (b) :: 변수에 담음
const arrFunc = () => {
  console.log("arrow function");
};

// 축약 가능 :: 04.js 참고
